/**
 * @fileOverview Zipper monad transformer for generic zipper.
 */
package ZipperT
with
    import 'akh::trans::state' StateT,
    
    import 'neith::zipper' zipper
in {

var ZipperMonad = \Instance get move -> {
    
    /* Queries
     **************************************************************************/
    /**
     * Call `f` with the current zipper and return result
     */
    Instance.inspect = Instance.prototype.inspect = get.map.bind(get);
    
    /**
     * Get the current focus of the zipper.
     */
    Instance.extract = Instance.prototype.extract = get.map(zipper.extract);
    
    /**
     * Call `f` with the current zipper and continue with result of `f`.
     */
    Instance.inspectWith = Instance.extract.chain.bind(Instance.extract);
    
    /* Basic Movement
     **************************************************************************/
    /**
     * Modify the current zipper.
     */
    Instance.move = Instance.prototype.move = move;
    
    Instance.up = Instance.prototype.up = move (zipper.up);
    
    Instance.down = Instance.prototype.down = move (zipper.down);
    
    Instance.left = Instance.prototype.left = move (zipper.left);
    
    Instance.right = Instance.prototype.right  = move (zipper.right);
    
    /* Compound Movement
     **************************************************************************/
    Instance.root = Instance.prototype.root = move (zipper.root);
    
    Instance.leftmost = Instance.prototype.leftmost = move (zipper.leftmost);
    
    Instance.rightmost = Instance.prototype.rightmost = move (zipper.rightmost);
    
    Instance.leftLeaf = Instance.prototype.leftLeaf = move (zipper.leftLeaf);
    
    Instance.rightLeaf = Instance.prototype.rightLeaf = move (zipper.rightLeaf);
    
    /* Editing
     **************************************************************************/
    Instance.replace = Instance.prototype.replace = \n -> move (zipper.replace @ n);
    
    Instance.modify = Instance.prototype.modify = \f -> move (zipper.modify @ f);
    
    Instance.remove = Instance.prototype.remove = move (zipper.remove);
    
    Instance.insertLeft = Instance.prototype.insertLeft = \n -> move (zipper.insertLeft @ n);
    
    Instance.insertRight = Instance.prototype.insertRight = \n -> move (zipper.insertRight @ n);
    
    Instance.insertChild = Instance.prototype.insertChild = \n -> move (zipper.insertChild @ n);
    
    Instance.appendChild = Instance.prototype.appendChild = \n -> move (zipper.appendChild @ n);
    
    return Instance;
};

/* Transformer
 ******************************************************************************/
ZipperT := \m -> {
    var Instance := StateT(m);
    
    ZipperMonad(Instance,
         Instance.get,
         Instance.modify);

    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Run a ZipperT computation. Return resulting value
 * 
 * @param m ZipperT computation.
 * @param ctx Starting context.
 */
ZipperT.runZipperT = StateT.evalStateT;

}